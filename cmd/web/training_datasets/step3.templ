package training_datasets

import "ai-platform/cmd/web"

templ TrainingDatasetStep3(projectID string, projectName string, corpus string, language string, defaultPrompt string) {
	@web.App("max-w-6xl") {
		<div class="max-w-6xl mx-auto">
			<div class="bg-white border border-gray-200 rounded-lg p-8 shadow-md mb-8">
				<div class="mb-6">
					<h1 class="text-2xl font-bold text-gray-900 mb-2">3/4 Create Training Data Prompt</h1>
					<p class="text-gray-600">Project: { projectName }</p>
				</div>

				<form id="step3-form" class="space-y-6">
					<div>
						<label for="prompt" class="block text-sm font-medium text-gray-700 mb-2">
							Generate Prompt
						</label>
						<textarea
							id="prompt"
							name="prompt"
							rows="10"
							required
							placeholder="Describe the task that you want to train on in detail and add a JSON output format"
							class="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
						>{ defaultPrompt }</textarea>
						<button
							type="button"
							id="analyze-btn"
							class="mt-2 inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
						>
							<svg class="hidden animate-spin -ml-1 mr-2 h-4 w-4 text-gray-700" id="analyze-spinner" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
								<circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
								<path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
							</svg>
							Analyze Prompt
						</button>
					</div>

					<!-- Analysis Results -->
					<div id="analysis-results" class="hidden p-4 bg-blue-50 border border-blue-200 rounded-md">
						<h3 class="text-sm font-semibold text-gray-900 mb-2">Analysis & Suggestions</h3>
						<p id="analysis-text" class="text-sm text-gray-700 whitespace-pre-wrap"></p>
						<p class="text-xs text-gray-500 mt-2 italic">The fields below have been automatically populated based on the analysis.</p>
					</div>

					<!-- Collapsible Advanced Fields -->
					<div class="border border-gray-200 rounded-lg">
						<button
							id="advanced-toggle"
							type="button"
							class="w-full px-4 py-3 text-left text-sm font-medium text-gray-700 bg-gray-50 hover:bg-gray-100 rounded-t-lg flex justify-between items-center"
						>
							<span>Advanced Fields</span>
							<svg id="advanced-icon" class="w-5 h-5 transform transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
							</svg>
						</button>
						<div id="advanced-content" class="hidden px-4 py-3 border-t border-gray-200">
							<div class="grid grid-cols-1 gap-4">
								<div>
									<label for="json-object-fields" class="block text-sm font-medium text-gray-700 mb-2">
										JSON Object Fields
									</label>
									<textarea
										id="json-object-fields"
										name="json-object-fields"
										rows="7"
										required
										placeholder='{"field1": "Description of field1", "field2": "Description of field2"}'
										class="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 font-mono text-sm"
									></textarea>
									<p class="text-xs text-gray-500 mt-1">JSON object with field names as keys and descriptions as values</p>
								</div>

								<div>
									<label for="input-field" class="block text-sm font-medium text-gray-700 mb-2">
										Input Field
									</label>
									<input
										type="text"
										id="input-field"
										name="input-field"
										required
										placeholder="The excepted input field of your JSON"
										value=""
										class="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
									/>
								</div>

								<div>
									<label for="output-field" class="block text-sm font-medium text-gray-700 mb-2">
										Output Field
									</label>
									<input
										type="text"
										id="output-field"
										name="output-field"
										required
										placeholder="The expected output field of your JSON"
										value=""
										class="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
									/>
								</div>

								<div>
									<label for="expected-output-size-chars" class="block text-sm font-medium text-gray-700 mb-2">
										Expected Output Size (Characters)
									</label>
									<input
										type="number"
										id="expected-output-size-chars"
										name="expected-output-size-chars"
										required
										placeholder="Expected number of characters in output"
										value=""
										min="1"
										class="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
									/>
								</div>
							</div>
						</div>
					</div>
				</form>

				<div class="mt-8 flex justify-between">
					<a
						href={ templ.SafeURL("/web/projects/" + projectID + "/training-datasets/step2?corpus=" + corpus) }
						class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50"
					>
						‚Üê Back
					</a>
					<button
						id="next-btn"
						class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700"
					>
						Next
					</button>
				</div>
			</div>
		</div>

		<script>
			const projectId = {{ projectID }};
			const corpus = {{ corpus }};
			const language = {{ language }};

			let analysisData = null;

			// Toggle advanced fields visibility
			document.getElementById('advanced-toggle').addEventListener('click', function() {
				const content = document.getElementById('advanced-content');
				const icon = document.getElementById('advanced-icon');

				if (content.classList.contains('hidden')) {
					content.classList.remove('hidden');
					icon.classList.add('rotate-180');
				} else {
					content.classList.add('hidden');
					icon.classList.remove('rotate-180');
				}
			});

			// Analyze Prompt
			document.getElementById('analyze-btn').addEventListener('click', async function() {
				const prompt = document.getElementById('prompt').value.trim();

				if (!prompt) {
					alert('Please enter a prompt first');
					return;
				}

				const analyzeBtn = document.getElementById('analyze-btn');
				const spinner = document.getElementById('analyze-spinner');
				const resultsDiv = document.getElementById('analysis-results');

				// Show loading state
				analyzeBtn.disabled = true;
				spinner.classList.remove('hidden');
				resultsDiv.classList.add('hidden');

				try {
					const response = await fetch('/api/analyze-training-dataset-prompt', {
						method: 'POST',
						headers: {
							'Content-Type': 'application/json',
						},
						credentials: 'include',
						body: JSON.stringify({ prompt: prompt })
					});

					if (!response.ok) {
						throw new Error('Failed to analyze prompt');
					}

					const data = await response.json();
					analysisData = data;

					// Display analysis text only
					document.getElementById('analysis-text').textContent = data.analysis_result;

					// Automatically populate form fields
					document.getElementById('json-object-fields').value = JSON.stringify(data.json_object_fields, null, 2);
					document.getElementById('input-field').value = data.input_field;
					document.getElementById('output-field').value = data.output_field;
					document.getElementById('expected-output-size-chars').value = data.expected_output_size_chars;

					// Trigger validation
					validateForm();

					resultsDiv.classList.remove('hidden');
				} catch (error) {
					alert('Error analyzing prompt: ' + error.message);
				} finally {
					analyzeBtn.disabled = false;
					spinner.classList.add('hidden');
				}
			});

			function validateForm() {
				const prompt = document.getElementById('prompt').value.trim();
				const jsonObjectFields = document.getElementById('json-object-fields').value.trim();
				const inputField = document.getElementById('input-field').value.trim();
				const outputField = document.getElementById('output-field').value.trim();
				const expectedOutputSizeChars = document.getElementById('expected-output-size-chars').value.trim();

				const nextBtn = document.getElementById('next-btn');

				if (prompt && jsonObjectFields && inputField && outputField && expectedOutputSizeChars) {
					nextBtn.disabled = false;
					nextBtn.classList.remove('bg-gray-400', 'cursor-not-allowed');
					nextBtn.classList.add('bg-blue-600', 'hover:bg-blue-700');
					nextBtn.onclick = function() {
						const promptParam = encodeURIComponent(prompt);
						const jsonObjectFieldsParam = encodeURIComponent(jsonObjectFields);
						const inputFieldParam = encodeURIComponent(inputField);
						const outputFieldParam = encodeURIComponent(outputField);
						const expectedOutputSizeCharsParam = encodeURIComponent(expectedOutputSizeChars);
						window.location.href = '/web/projects/' + projectId + '/training-datasets/step4?corpus=' + encodeURIComponent(corpus) + '&language=' + encodeURIComponent(language) + '&prompt=' + promptParam + '&json_object_fields=' + jsonObjectFieldsParam + '&input_field=' + inputFieldParam + '&output_field=' + outputFieldParam + '&expected_output_size_chars=' + expectedOutputSizeCharsParam;
					};
				} else {
					nextBtn.disabled = true;
					nextBtn.classList.add('bg-gray-400', 'cursor-not-allowed');
					nextBtn.classList.remove('bg-blue-600', 'hover:bg-blue-700');
					nextBtn.onclick = null;
				}
			}

			document.getElementById('prompt').addEventListener('input', validateForm);
			document.getElementById('json-object-fields').addEventListener('input', validateForm);
			document.getElementById('input-field').addEventListener('input', validateForm);
			document.getElementById('output-field').addEventListener('input', validateForm);
			document.getElementById('expected-output-size-chars').addEventListener('input', validateForm);
			validateForm();
		</script>
	}
}