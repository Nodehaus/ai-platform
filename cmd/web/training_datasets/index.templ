package training_datasets

import "ai-platform/cmd/web"
import "fmt"

templ TrainingDatasetIndex(data TrainingDatasetIndexData) {
	@web.App("max-w-6xl") {
		<div class="max-w-6xl mx-auto">
			<div class="bg-white border border-gray-200 rounded-lg p-8 shadow-md mb-8">
				<div class="mb-6">
					<div class="flex justify-between items-center mb-4">
						<div>
							<h1 class="text-2xl font-bold text-gray-900 mb-2">Training Dataset</h1>
							<p class="text-gray-600">Project: { data.ProjectName }</p>
						</div>
						<div class="flex items-center space-x-2">
							<span class="text-sm text-gray-600">Status:</span>
							<span class={
								"inline-flex items-center px-3 py-1 rounded-full text-sm font-medium",
								templ.KV("bg-green-100 text-green-800", data.TrainingDataset.Status == "DONE"),
								templ.KV("bg-yellow-100 text-yellow-800", data.TrainingDataset.Status == "RUNNING"),
								templ.KV("bg-blue-100 text-blue-800", data.TrainingDataset.Status == "PLANNING"),
								templ.KV("bg-red-100 text-red-800", data.TrainingDataset.Status == "FAILED" || data.TrainingDataset.Status == "ABORTED"),
							}>
								{ data.TrainingDataset.Status }
							</span>
						</div>
					</div>

					<!-- Collapsible Metadata -->
					<div class="border border-gray-200 rounded-lg">
						<button
							id="metadata-toggle"
							class="w-full px-4 py-3 text-left text-sm font-medium text-gray-700 bg-gray-50 hover:bg-gray-100 rounded-t-lg flex justify-between items-center"
						>
							<span>Training Dataset Metadata</span>
							<svg id="metadata-icon" class="w-5 h-5 transform transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
							</svg>
						</button>
						<div id="metadata-content" class="hidden px-4 py-3 border-t border-gray-200">
							<div class="grid grid-cols-2 gap-4 text-sm">
								<div>
									<span class="font-medium text-gray-700">Version:</span>
									<span class="ml-2 text-gray-600">{ fmt.Sprintf("%d", data.TrainingDataset.Version) }</span>
								</div>
								<div>
									<span class="font-medium text-gray-700">Language:</span>
									<span class="ml-2 text-gray-600">{ data.TrainingDataset.LanguageISO }</span>
								</div>
								<div>
									<span class="font-medium text-gray-700">Input Field:</span>
									<span class="ml-2 text-gray-600">{ data.TrainingDataset.InputField }</span>
								</div>
								<div>
									<span class="font-medium text-gray-700">Output Field:</span>
									<span class="ml-2 text-gray-600">{ data.TrainingDataset.OutputField }</span>
								</div>
								<div>
									<span class="font-medium text-gray-700">Examples Generated:</span>
									<span class="ml-2 text-gray-600">{ fmt.Sprintf("%d", data.TrainingDataset.GenerateExamplesNumber) }</span>
								</div>
								if data.TrainingDataset.CorpusName != "" {
									<div>
										<span class="font-medium text-gray-700">Corpus:</span>
										<span class="ml-2 text-gray-600">{ data.TrainingDataset.CorpusName }</span>
									</div>
								}
								if data.TrainingDataset.TokensIn != nil {
									<div>
										<span class="font-medium text-gray-700">Tokens In:</span>
										<span class="ml-2 text-gray-600">{ fmt.Sprintf("%d", *data.TrainingDataset.TokensIn) }</span>
									</div>
								}
								if data.TrainingDataset.TokensOut != nil {
									<div>
										<span class="font-medium text-gray-700">Tokens Out:</span>
										<span class="ml-2 text-gray-600">{ fmt.Sprintf("%d", *data.TrainingDataset.TokensOut) }</span>
									</div>
								}
								<div class="col-span-2">
									<span class="font-medium text-gray-700">Generation Prompt:</span>
									<div class="mt-1 p-2 bg-gray-50 rounded text-gray-600 text-xs">
										{ data.TrainingDataset.GeneratePrompt }
									</div>
								</div>
							</div>
						</div>
					</div>
				</div>

				if data.TrainingDataset.Status == "DONE" && len(data.TrainingDataset.DataItemsSample) > 0 {
					<!-- Data Sample Table -->
					<div class="mb-6">
						<div class="flex justify-between items-center mb-4">
							<h2 class="text-lg font-semibold text-gray-900">Training Data Sample</h2>
							<span class="text-sm text-gray-600">
								Total items: { fmt.Sprintf("%d", data.TotalDataItems) }
							</span>
						</div>

						<div class="overflow-x-auto border border-gray-200 rounded-lg">
							<table class="min-w-full divide-y divide-gray-200">
								<thead class="bg-gray-50">
									<tr>
										for _, fieldName := range data.TrainingDataset.FieldNames {
											<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
												{ fieldName }
											</th>
										}
									</tr>
								</thead>
								<tbody class="bg-white divide-y divide-gray-200">
									for _, item := range data.TrainingDataset.DataItemsSample {
										<tr class="hover:bg-gray-50">
											for _, value := range item {
												<td
													class="px-6 py-4 text-sm text-gray-900 max-w-xs truncate cursor-help relative group"
													title={ value }
												>
													<span class="block">{ value }</span>
													<!-- Tooltip on hover -->
													<div class="absolute z-10 invisible group-hover:visible bg-gray-900 text-white text-xs rounded py-2 px-3 bottom-full left-1/2 transform -translate-x-1/2 mb-2 max-w-sm shadow-lg">
														<div class="whitespace-pre-wrap break-words">{ value }</div>
														<!-- Arrow -->
														<div class="absolute top-full left-1/2 transform -translate-x-1/2 border-4 border-transparent border-t-gray-900"></div>
													</div>
												</td>
											}
										</tr>
									}
								</tbody>
							</table>
						</div>

						<!-- Action Buttons -->
						<div class="mt-4 flex space-x-3">
							<button disabled class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 text-sm font-medium">
								Review All (soon)
							</button>
							<button disabled class="px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 text-sm font-medium">
								Create More (soon)
							</button>
							<button onclick={ templ.ComponentScript{Call: fmt.Sprintf("downloadTrainingDataset('%s', '%s')", data.ProjectID, data.TrainingDatasetID)} } class="px-4 py-2 bg-gray-600 text-white rounded-md hover:bg-gray-700 text-sm font-medium">
								Download
							</button>
							<button onclick="openUploadModal()" class="px-4 py-2 bg-gray-600 text-white rounded-md hover:bg-gray-700 text-sm font-medium">
								Upload
							</button>
						</div>
					</div>

					<!-- Separator -->
					<hr class="my-8 border-gray-200"/>

					<!-- Fine-tuning Section -->
					<div>
						<h2 class="text-lg font-semibold text-gray-900 mb-4">Start Fine-tuning</h2>
						<form hx-post={ "/web/projects/" + data.ProjectID + "/finetunes/create" } hx-target="#finetune-result" hx-swap="innerHTML" hx-on::after-request="if(event.detail.xhr.responseText.includes('bg-green-50')) { document.getElementById('finetune-form-buttons').style.display = 'none'; }" class="space-y-4">
							<input type="hidden" name="training-dataset-id" value={ data.TrainingDatasetID }/>
							<div class="grid grid-cols-1 md:grid-cols-2 gap-4">
								<div>
									<label for="base-model" class="block text-sm font-medium text-gray-700 mb-2">
										Base Model
									</label>
									<select
										id="base-model"
										name="base-model"
										required
										class="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
									>
										<option value="">Select a model...</option>
										<option value="unsloth/gemma-3-1b-it">Gemma 3 1B</option>
										<option value="unsloth/gemma-3-4b-it">Gemma 3 4B</option>
										<option value="unsloth/Qwen3-1.7B">Qwen 3 1.7B</option>
										<option value="unsloth/Qwen3-4B-Instruct-2507">Qwen 3 4B</option>
									</select>
								</div>
								<div>
									<label for="examples-count" class="block text-sm font-medium text-gray-700 mb-2">
										Number of examples to train on
									</label>
									<div class="flex items-center space-x-2">
										<input
											type="number"
											id="examples-count"
											name="examples-count"
											min="1"
											max={ fmt.Sprintf("%d", data.TotalDataItems) }
											value={ fmt.Sprintf("%d", data.TotalDataItems) }
											required
											class="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
										/>
										<label class="flex items-center text-sm text-gray-600">
											<input type="checkbox" id="random-selection" name="random-selection" class="mr-2"/>
											Select randomly
										</label>
									</div>
								</div>
							</div>
							<div id="finetune-result" class="mt-4"></div>
							<div id="finetune-form-buttons" class="pt-4">
								<button
									type="submit"
									class="px-6 py-2 bg-purple-600 text-white rounded-md hover:bg-purple-700 text-sm font-medium"
								>
									Start Fine-tuning
								</button>
							</div>
						</form>
					</div>
				} else if data.TrainingDataset.Status == "DONE" {
					<div class="text-center py-8">
						<p class="text-gray-500">No training data samples available.</p>
					</div>
				} else {
					<div class="text-center py-8">
						<p class="text-gray-500">Training dataset is still processing. Data samples will be available once the status is DONE.</p>
					</div>
				}

				<!-- Back Button -->
				<div class="mt-8 pt-6 border-t border-gray-200">
					<a
						href="/web/home"
						class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50"
					>
						← Back to Projects
					</a>
				</div>
			</div>
		</div>

		<!-- Upload Training Dataset Modal -->
		<div id="uploadModal" class="fixed inset-0 bg-black/50 hidden flex items-center justify-center z-50">
			<div class="bg-white rounded-lg p-6 w-96 max-w-md mx-4">
				<h2 class="text-xl font-semibold mb-4">Upload Training Dataset</h2>
				<form id="uploadForm" enctype="multipart/form-data">
					<div id="upload-error" class="mb-4 min-h-[1rem]"></div>
					<div id="upload-success" class="mb-4 min-h-[1rem]"></div>

					<div class="mb-4">
						<label class="block text-sm font-medium text-gray-700 mb-2">Upload Mode</label>
						<div class="space-y-2">
							<label class="flex items-center">
								<input type="radio" name="uploadMode" value="add" checked class="mr-2"/>
								<span class="text-sm">Add to training data</span>
							</label>
							<label class="flex items-center">
								<input type="radio" name="uploadMode" value="replace" class="mr-2"/>
								<span class="text-sm">Replace training data (new version)</span>
							</label>
						</div>
					</div>

					<div class="mb-4">
						<label for="csvFile" class="block text-sm font-medium text-gray-700 mb-2">CSV File</label>
						<input
							type="file"
							id="csvFile"
							name="file"
							accept=".csv"
							required
							class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
						/>
						<p class="mt-1 text-xs text-gray-500">Select a CSV file to upload</p>
					</div>

					<div class="flex justify-end space-x-3">
						<button
							type="button"
							onclick="closeUploadModal()"
							class="px-4 py-2 text-gray-600 border border-gray-300 rounded-md hover:bg-gray-50"
						>
							Cancel
						</button>
						<button
							type="submit"
							class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
						>
							Upload
						</button>
					</div>
				</form>
			</div>
		</div>

		<script>
			// Page data
			const PAGE_PROJECT_ID = {{ data.ProjectID }};
			const PAGE_TRAINING_DATASET_ID = {{ data.TrainingDatasetID }};

			// Toggle metadata visibility
			document.getElementById('metadata-toggle').addEventListener('click', function() {
				const content = document.getElementById('metadata-content');
				const icon = document.getElementById('metadata-icon');

				if (content.classList.contains('hidden')) {
					content.classList.remove('hidden');
					icon.classList.add('rotate-180');
				} else {
					content.classList.add('hidden');
					icon.classList.remove('rotate-180');
				}
			});

			// Function to download training dataset with authentication
			function downloadTrainingDataset(projectId, trainingDatasetId) {
				// Open the download URL in a new tab/window
				// The browser will automatically include cookies and trigger the download
				window.open(`/api/projects/${projectId}/training-datasets/${trainingDatasetId}/download`, '_blank');
			}

			// Upload modal functions
			function openUploadModal() {
				document.getElementById('uploadModal').classList.remove('hidden');
				// Clear any previous messages
				document.getElementById('upload-error').innerHTML = '';
				document.getElementById('upload-success').innerHTML = '';
				// Reset form
				document.getElementById('uploadForm').reset();
			}

			function closeUploadModal() {
				document.getElementById('uploadModal').classList.add('hidden');
			}

			// Close modal when clicking outside
			document.getElementById('uploadModal').addEventListener('click', function(e) {
				if (e.target === this) {
					closeUploadModal();
				}
			});

			// Handle form submission
			document.getElementById('uploadForm').addEventListener('submit', async function(e) {
				e.preventDefault();

				// Disable submit button to prevent double submission
				const submitButton = e.target.querySelector('button[type="submit"]');
				submitButton.disabled = true;
				submitButton.classList.add('opacity-50', 'cursor-not-allowed');

				const formData = new FormData(e.target);
				const uploadMode = formData.get('uploadMode');

				// Determine endpoint based on upload mode
				let endpoint;
				if (uploadMode === 'add') {
					endpoint = '/api/projects/' + PAGE_PROJECT_ID + '/training-datasets/' + PAGE_TRAINING_DATASET_ID + '/upload';
				} else {
					endpoint = '/api/projects/' + PAGE_PROJECT_ID + '/training-datasets/upload';
				}

				// Clear previous messages
				document.getElementById('upload-error').innerHTML = '';
				document.getElementById('upload-success').innerHTML = '';

				try {
					const response = await fetch(endpoint, {
						method: 'POST',
						body: formData,
						credentials: 'include'
					});

					const data = await response.json();

					if (response.ok) {
						// Show success message
						document.getElementById('upload-success').innerHTML =
							'<div class="bg-green-50 border border-green-200 text-green-700 px-4 py-3 rounded">' +
							data.message +
							'</div>';

						// Redirect or reload based on upload mode
						setTimeout(() => {
							if (uploadMode === 'replace' && data.training_dataset_id) {
								// Redirect to the new training dataset
								window.location.href = '/web/projects/' + PAGE_PROJECT_ID + '/training-datasets/' + data.training_dataset_id;
							} else {
								// Reload current page for 'add' mode
								window.location.reload();
							}
						}, 1500);
					} else {
						// Show error message
						document.getElementById('upload-error').innerHTML =
							'<div class="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded">' +
							(data.error || 'Upload failed') +
							'</div>';

						// Re-enable submit button on error
						submitButton.disabled = false;
						submitButton.classList.remove('opacity-50', 'cursor-not-allowed');
					}
				} catch (error) {
					document.getElementById('upload-error').innerHTML =
						'<div class="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded">' +
						'Network error. Please try again.' +
						'</div>';

					// Re-enable submit button on error
					submitButton.disabled = false;
					submitButton.classList.remove('opacity-50', 'cursor-not-allowed');
				}
			});
		</script>
	}
}